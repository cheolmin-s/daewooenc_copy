// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icon-customer-faq-link1-name: 'icon-customer-faq-link1';
$icon-customer-faq-link1-x: 0px;
$icon-customer-faq-link1-y: 144px;
$icon-customer-faq-link1-offset-x: 0px;
$icon-customer-faq-link1-offset-y: -144px;
$icon-customer-faq-link1-width: 140px;
$icon-customer-faq-link1-height: 40px;
$icon-customer-faq-link1-total-width: 438px;
$icon-customer-faq-link1-total-height: 244px;
$icon-customer-faq-link1-image: '../images/icons/icon.png';
$icon-customer-faq-link1: (0px, 144px, 0px, -144px, 140px, 40px, 438px, 244px, '../images/icons/icon.png', 'icon-customer-faq-link1', );
$icon-customer-faq-link2-name: 'icon-customer-faq-link2';
$icon-customer-faq-link2-x: 60px;
$icon-customer-faq-link2-y: 194px;
$icon-customer-faq-link2-offset-x: -60px;
$icon-customer-faq-link2-offset-y: -194px;
$icon-customer-faq-link2-width: 56px;
$icon-customer-faq-link2-height: 15px;
$icon-customer-faq-link2-total-width: 438px;
$icon-customer-faq-link2-total-height: 244px;
$icon-customer-faq-link2-image: '../images/icons/icon.png';
$icon-customer-faq-link2: (60px, 194px, -60px, -194px, 56px, 15px, 438px, 244px, '../images/icons/icon.png', 'icon-customer-faq-link2', );
$icon-footer-logo-name: 'icon-footer-logo';
$icon-footer-logo-x: 150px;
$icon-footer-logo-y: 144px;
$icon-footer-logo-offset-x: -150px;
$icon-footer-logo-offset-y: -144px;
$icon-footer-logo-width: 116px;
$icon-footer-logo-height: 28px;
$icon-footer-logo-total-width: 438px;
$icon-footer-logo-total-height: 244px;
$icon-footer-logo-image: '../images/icons/icon.png';
$icon-footer-logo: (150px, 144px, -150px, -144px, 116px, 28px, 438px, 244px, '../images/icons/icon.png', 'icon-footer-logo', );
$icon-prugio-iink-name: 'icon-prugio-iink';
$icon-prugio-iink-x: 276px;
$icon-prugio-iink-y: 144px;
$icon-prugio-iink-offset-x: -276px;
$icon-prugio-iink-offset-y: -144px;
$icon-prugio-iink-width: 67px;
$icon-prugio-iink-height: 12px;
$icon-prugio-iink-total-width: 438px;
$icon-prugio-iink-total-height: 244px;
$icon-prugio-iink-image: '../images/icons/icon.png';
$icon-prugio-iink: (276px, 144px, -276px, -144px, 67px, 12px, 438px, 244px, '../images/icons/icon.png', 'icon-prugio-iink', );
$icon-top-btn-name: 'icon-top-btn';
$icon-top-btn-x: 0px;
$icon-top-btn-y: 194px;
$icon-top-btn-offset-x: 0px;
$icon-top-btn-offset-y: -194px;
$icon-top-btn-width: 50px;
$icon-top-btn-height: 50px;
$icon-top-btn-total-width: 438px;
$icon-top-btn-total-height: 244px;
$icon-top-btn-image: '../images/icons/icon.png';
$icon-top-btn: (0px, 194px, 0px, -194px, 50px, 50px, 438px, 244px, '../images/icons/icon.png', 'icon-top-btn', );
$icon-vision-diagram-bg-name: 'icon-vision-diagram-bg';
$icon-vision-diagram-bg-x: 0px;
$icon-vision-diagram-bg-y: 0px;
$icon-vision-diagram-bg-offset-x: 0px;
$icon-vision-diagram-bg-offset-y: 0px;
$icon-vision-diagram-bg-width: 438px;
$icon-vision-diagram-bg-height: 134px;
$icon-vision-diagram-bg-total-width: 438px;
$icon-vision-diagram-bg-total-height: 244px;
$icon-vision-diagram-bg-image: '../images/icons/icon.png';
$icon-vision-diagram-bg: (0px, 0px, 0px, 0px, 438px, 134px, 438px, 244px, '../images/icons/icon.png', 'icon-vision-diagram-bg', );
$icon-width: 438px;
$icon-height: 244px;
$icon-image: '../images/icons/icon.png';
$icon-sprites: ($icon-customer-faq-link1, $icon-customer-faq-link2, $icon-footer-logo, $icon-prugio-iink, $icon-top-btn, $icon-vision-diagram-bg, );
$icon: (438px, 244px, '../images/icons/icon.png', $icon-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
